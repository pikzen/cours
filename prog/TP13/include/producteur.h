// -*- c++ -*-

#ifndef __PRODUCTEUR__H__
#define __PRODUCTEUR__H__

#include "composant.h"
#include "flot.h"
#include "counted_ptr.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \class	producteur
///
/// \brief	Interface d'un producteur d'échantillons sonores. Il s'agit d'une interface 
///		décrivant un composant ne possédant que des sorties.
///
/// \author	Jean Christophe Engel, Fabrice Lamarche, University Of Rennes 1
/// \date	23/04/2010
////////////////////////////////////////////////////////////////////////////////////////////////////
class producteur : public virtual composant {
public:

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	virtual ~producteur()
  /// \brief	Destructeur virtuel. 
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual ~producteur() {}

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	virtual unsigned int nbSorties() const = 0
  /// \brief	Nombre de sorties du composant. 
  /// \return Le nombre de sorties du composant. 
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual unsigned int nbSorties() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \fn	virtual const counted_ptr<flot> & getSortie(unsigned int numsortie) = 0
  /// \brief	Recupération d'une sortie du composant. 
  /// \param	numsortie	Le numero de la sortie a recuperer. 
  /// \pre 0 <= numsortie < nbSorties()
  /// \return	La sortie demandée. 
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual const counted_ptr<flot> & getSortie(unsigned int numsortie) const = 0;
};

#endif // __PRODUCTEUR__H__
